#!/usr/bin/env python3
"""
Docker Configuration Diagnostic & Fix Script
===========================================
Diagnostica y corrige problemas comunes de configuraci√≥n Docker
"""

import subprocess
import os
import sys
import time
import json

def run_command(command, capture_output=True):
    """Ejecuta un comando y retorna el resultado"""
    try:
        if capture_output:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            return result.returncode == 0, result.stdout, result.stderr
        else:
            result = subprocess.run(command, shell=True)
            return result.returncode == 0, "", ""
    except Exception as e:
        return False, "", str(e)

def check_docker_status():
    """Verifica el estado de Docker"""
    print("üîç VERIFICANDO ESTADO DE DOCKER")
    print("=" * 50)
    
    # Check if Docker is running
    success, stdout, stderr = run_command("docker --version")
    if not success:
        print("‚ùå Docker no est√° instalado o no est√° en PATH")
        return False
    
    print(f"‚úÖ Docker versi√≥n: {stdout.strip()}")
    
    # Check if Docker daemon is running
    success, stdout, stderr = run_command("docker info")
    if not success:
        print("‚ùå Docker daemon no est√° ejecut√°ndose")
        print("üí° Intenta iniciar Docker Desktop")
        return False
    
    print("‚úÖ Docker daemon ejecut√°ndose")
    return True

def check_compose_file():
    """Verifica la configuraci√≥n del docker-compose"""
    print("\nüîç VERIFICANDO ARCHIVO COMPOSE")
    print("=" * 50)
    
    if not os.path.exists("compose.yml"):
        print("‚ùå No se encuentra compose.yml")
        return False
    
    print("‚úÖ compose.yml encontrado")
    
    # Validate compose file
    success, stdout, stderr = run_command("docker compose config")
    if not success:
        print(f"‚ùå Error en compose.yml: {stderr}")
        return False
    
    print("‚úÖ compose.yml v√°lido")
    return True

def check_env_files():
    """Verifica los archivos de environment"""
    print("\nüîç VERIFICANDO ARCHIVOS .ENV")
    print("=" * 50)
    
    if not os.path.exists(".env"):
        print("‚ùå Archivo .env no encontrado")
        print("üí° Copia .env.example a .env")
        return False
    
    print("‚úÖ .env encontrado")
    
    # Check required variables
    required_vars = ['POSTGRES_DB', 'POSTGRES_USER', 'POSTGRES_PASSWORD']
    
    with open('.env', 'r') as f:
        env_content = f.read()
    
    missing_vars = []
    for var in required_vars:
        if var not in env_content:
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables faltantes: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ Variables de entorno configuradas")
    return True

def stop_and_cleanup():
    """Detiene y limpia containers existentes"""
    print("\nüßπ LIMPIANDO CONTAINERS EXISTENTES")
    print("=" * 50)
    
    # Stop containers
    success, stdout, stderr = run_command("docker compose down")
    if success:
        print("‚úÖ Containers detenidos")
    else:
        print("‚ö†Ô∏è No hab√≠a containers ejecut√°ndose")
    
    # Remove volumes if needed (uncomment if you want to reset DB)
    # success, stdout, stderr = run_command("docker compose down -v")
    
    # Prune dangling images
    run_command("docker image prune -f")
    print("‚úÖ Limpieza completada")

def rebuild_containers():
    """Reconstruye los containers"""
    print("\nüî® RECONSTRUYENDO CONTAINERS")
    print("=" * 50)
    
    # Build without cache
    success, stdout, stderr = run_command("docker compose build --no-cache", capture_output=False)
    if not success:
        print("‚ùå Error construyendo containers")
        return False
    
    print("‚úÖ Containers reconstruidos")
    return True

def start_services():
    """Inicia los servicios"""
    print("\nüöÄ INICIANDO SERVICIOS")
    print("=" * 50)
    
    success, stdout, stderr = run_command("docker compose up -d", capture_output=False)
    if not success:
        print("‚ùå Error iniciando servicios")
        return False
    
    print("‚úÖ Servicios iniciados")
    
    # Wait for services to be ready
    print("‚è≥ Esperando que los servicios est√©n listos...")
    time.sleep(15)
    
    return True

def test_services():
    """Prueba que los servicios est√©n funcionando"""
    print("\nüß™ PROBANDO SERVICIOS")
    print("=" * 50)
    
    # Check container status
    success, stdout, stderr = run_command("docker compose ps")
    if success:
        print("üìã Estado de containers:")
        print(stdout)
    
    # Test database connection
    success, stdout, stderr = run_command("docker compose exec -T web python manage.py check --database default")
    if success:
        print("‚úÖ Conexi√≥n a base de datos OK")
    else:
        print(f"‚ùå Error conexi√≥n DB: {stderr}")
        return False
    
    # Test basic Django functionality
    success, stdout, stderr = run_command("docker compose exec -T web python manage.py check")
    if success:
        print("‚úÖ Django system check OK")
    else:
        print(f"‚ùå Django system check fall√≥: {stderr}")
        return False
    
    return True

def main():
    """Funci√≥n principal de diagn√≥stico y correcci√≥n"""
    print("üîß DIAGN√ìSTICO Y CORRECCI√ìN DOCKER")
    print("=" * 60)
    print("Este script diagnosticar√° y corregir√° problemas comunes")
    print("=" * 60)
    
    # Step 1: Check Docker
    if not check_docker_status():
        print("\n‚ùå FALLO CR√çTICO: Docker no disponible")
        print("Por favor instala Docker Desktop y aseg√∫rate que est√© ejecut√°ndose")
        sys.exit(1)
    
    # Step 2: Check compose file
    if not check_compose_file():
        print("\n‚ùå FALLO CR√çTICO: Problema con compose.yml")
        sys.exit(1)
    
    # Step 3: Check environment
    if not check_env_files():
        print("\n‚ùå FALLO CR√çTICO: Problema con variables de entorno")
        sys.exit(1)
    
    # Step 4: Clean and rebuild
    print("\n" + "=" * 60)
    response = input("¬øQuieres limpiar y reconstruir los containers? (y/N): ")
    if response.lower() in ['y', 'yes', 's', 'si']:
        stop_and_cleanup()
        
        if not rebuild_containers():
            print("\n‚ùå FALLO: No se pudieron reconstruir los containers")
            sys.exit(1)
        
        if not start_services():
            print("\n‚ùå FALLO: No se pudieron iniciar los servicios")
            sys.exit(1)
    
    # Step 5: Test services
    if not test_services():
        print("\n‚ùå FALLO: Los servicios no est√°n funcionando correctamente")
        print("\nüí° SUGERENCIAS:")
        print("1. Verifica que Docker Desktop est√© ejecut√°ndose")
        print("2. Revisa los logs: docker compose logs")
        print("3. Verifica el archivo .env")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("‚úÖ DIAGN√ìSTICO COMPLETADO EXITOSAMENTE")
    print("üöÄ Todos los servicios est√°n funcionando correctamente")
    print("=" * 60)
    
    print("\nüìã PR√ìXIMOS PASOS:")
    print("1. Ejecuta: docker compose exec web python quick_regression_check.py")
    print("2. Verifica la aplicaci√≥n en: http://localhost:8000")
    print("3. Ejecuta los tests: python test_regression_simple.ps1")

if __name__ == "__main__":
    main()
